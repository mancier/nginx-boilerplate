server {
    server_name ${SERVER_URL};

    listen 443 ssl http2 default_server;
    listen [::]:443 ssl http2;
    ssl_protocols TLSv1.1 TLSv1.2;
    ssl_prefer_server_ciphers on;
    ssl_ciphers ECDH+AESGCM:ECDH+AES256:ECDH+AES128:DHE+AES128:!ADH:!AECDH:!MD5;
    ssl_certificate         /etc/nginx/certificates/cert.pem;
    ssl_certificate_key     /etc/nginx/certificates/privkey.pem;

    proxy_http_version 1.1;
    client_max_body_size 100M;

    gzip on;
    gzip_disable "msie6";
    gzip_vary on;
    gzip_proxied any;
    gzip_comp_level 6;
    gzip_buffers 16 8k;
    gzip_http_version 1.1;
    gzip_types application/javascript text/plain text/css application/json application/x-javascript text/xml application/xml application/xml+rss text/javascript;

    location /api {
      rewrite ^/api/(.*) /$1 break;
      proxy_pass http://api:5959;

      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
      proxy_set_header Host $http_host;
      proxy_redirect off;
    }

    location /socket.io {
        proxy_pass http://api:5050;

        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host $host;
        proxy_cache_bypass $http_upgrade;

        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Host $host;
        proxy_set_header X-Forwarded-Server $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header X-Original-Request $request_uri;
    }

    location ~* \.(?:css|js)$ { 
        proxy_pass http://front:4404;
    }     
    
    location / {
        proxy_pass http://front:4404;

        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header Host $http_host;
        proxy_redirect off;
    }
}

server {
    listen 80 default_server;
    listen [::]:80;
    server_name ${SERVER_URL};

    location / {
        rewrite ^ https://$host$request_uri? permanent;
    }
}
